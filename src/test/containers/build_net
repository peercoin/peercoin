#!/usr/bin/env ruby

require File.expand_path('../boot', __FILE__)

shift = (Time.at(1345090000) - Time.now).to_i + 30 * 24 * 3600

puts "Starting seed"
seed = CoinContainer.new(
  image: 'peercoin/seed',
  args: {
    "timetravel" => shift,
  }
)
seed.wait_for_boot

node_names = %w( a b c d e )
puts "Starting #{node_names.size} nodes: #{node_names.inspect}"
nodes = node_names.map do |name|
  CoinContainer.new(
    image: 'peercoin/node',
    links: [seed.name],
    delete_at_exit: true,
    args: {
      "timetravel" => shift,
    }
  )
end

all = [seed] + nodes

amount = 100_000
amount_string = amount.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse
outputs = 100

nodes.each_with_index do |node, i|
    node.wait_for_boot

    address = node.rpc("getaccountaddress", "")

    amount_per_output = (amount / outputs).to_i
    puts "Sending #{amount_string} to node #{node_names[i]} in #{outputs} transactions of #{amount_per_output}"
    outputs.times do |i|
      seed.rpc("sendtoaddress", address, amount_per_output)
      print "\r#{i + 1}"
      STDOUT.flush
    end
    puts
    puts "Generating block to confirm"
    seed.generate_stake
end

puts "Waiting for confirmations"
loop do
  all.each { |n| n.rpc("timetravel", 60) }
  seed.generate_stake
  balances = nodes.map { |n| n.rpc("getbalance") }
  puts "Balances: #{balances.inspect}"
  if balances.all? { |b| b == amount }
    break
  end
end

nModifierInterval=60*20
count = 64

puts "Moving near protocol v5 switch time"
shift = 1447700000 -  Time.parse(seed.info["time"]).to_i - count * nModifierInterval
all.each { |n| n.rpc("timetravel", shift) }

puts "Building next #{count} blocks at nModifierInterval intervals (#{nModifierInterval} seconds)"
count.times do |i|
  all.each { |n| n.rpc("timetravel", nModifierInterval) }
  seed.generate_stake
  print "\r%2d/%2d" % [i+1, count]
  STDOUT.flush
end
puts

puts "Moving to current time"
START_TIME = Time.utc(2017, 1, 1, 12, 0, 0)
last_blocks_interval = 40000
shift = (START_TIME - Time.parse(seed.info["time"])).to_i
last_blocks_count = shift / last_blocks_interval

puts "Building #{last_blocks_count} more blocks at #{last_blocks_interval} seconds intervals to reach #{START_TIME}"
last_blocks_count.times do |i|
  all.each { |n| n.rpc("timetravel", last_blocks_interval) }
  seed.generate_stake
  print "\r%2d/%2d" % [i+1, last_blocks_count]
  STDOUT.flush
end
puts

seed_height = seed.block_count

puts "Waiting for all nodes to sync at seed height (#{seed_height})"
loop do
  heights = all.map(&:block_count)
  p heights
  break if heights.all? { |h| h == seed_height }
  sleep 1
end

puts "Shutting down seed"
seed.shutdown

nodes.each_with_index do |node, i|
    name = node_names[i]
    image_name = "peercoinnet/#{name}"
    puts "Creating image #{image_name}"
    node.shutdown
    node.wait_for_shutdown
    node.commit(image_name)
end

