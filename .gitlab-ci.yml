stages:
  - base
  - build
  - package
  - upload
  - release

variables:
  GITIAN_DIR: /opt/gitian-builder
  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/peercoin/${CI_COMMIT_TAG}"

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_ID
      when: never
    - when: always

.build docker job:
  stage: base
  image: docker:stable
  variables:
    DOCKER_BUILDKIT: 1
    GIT_STRATEGY: none
  rules:
    - if: $CI_PIPELINE_SOURCE != "trigger"
  services:
    - docker:stable-dind
  before_script:
    - echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
  after_script:
    - docker tag $IMAGE $IMAGE:$CI_COMMIT_REF_SLUG
    - docker push $IMAGE:$CI_COMMIT_REF_SLUG
    - if [ "$CI_COMMIT_REF_NAME" == "$CI_DEFAULT_BRANCH" ]; then docker push $IMAGE; fi;

build gitian builder:
  extends: .build docker job
  variables:
    IMAGE: $CI_REGISTRY_IMAGE/gitian/builder
  script:
    - |
      docker build --tag $IMAGE --cache-from $IMAGE:$CI_COMMIT_REF_SLUG --build-arg BUILDKIT_INLINE_CACHE=1 -<<EOF
        FROM docker:stable-dind
        RUN apk add curl make ruby wget git sed
        RUN git clone https://github.com/devrandom/gitian-builder.git ${GITIAN_DIR}
        RUN mkdir ${GITIAN_DIR}/inputs ${GITIAN_DIR}/var
        RUN wget -N https://github.com/phracker/MacOSX-SDKs/releases/download/11.3/MacOSX10.14.sdk.tar.xz \
            && tar xf MacOSX10.14.sdk.tar.xz \
            && tar czf ${GITIAN_DIR}/inputs/MacOSX10.14.sdk.tar.gz MacOSX10.14.sdk \
            && rm -rf MacOSX10.14.sdk MacOSX10.14.sdk.tar.xz
      EOF

bionic base image:
  extends: .build docker job
  variables:
    IMAGE: $CI_REGISTRY_IMAGE/gitian/base-bionic-amd64
  script:
    - |
      docker build --tag $IMAGE --cache-from $IMAGE:$CI_COMMIT_REF_SLUG --build-arg BUILDKIT_INLINE_CACHE=1 -<<EOF
        FROM ubuntu:bionic
        ENV DEBIAN_FRONTEND=noninteractive
        RUN apt-get update && apt-get --no-install-recommends -y install pciutils build-essential git subversion language-pack-en wget lsb-release
        RUN useradd -ms /bin/bash -U ubuntu
        USER ubuntu:ubuntu
        WORKDIR /home/ubuntu
        CMD ["sleep", "infinity"]
      EOF

.build job:
  stage: build
  image: $CI_REGISTRY_IMAGE/gitian/builder:$CI_COMMIT_REF_SLUG
  services:
    - docker:stable-dind
  cache:
    # peercoin TODO bind major versions to cache, eg. CI_JOB_NAME + v0.9.0
    paths:
      - gitian-cache
    key: gitian-cache-${TARGET_ARCH}
  variables:
    GIT_DEPTH: 0
    DOCKER_BUILDKIT: 1
    USE_DOCKER: 1
    DEBIAN_FRONTEND: noninteractive
    IMAGE: $CI_REGISTRY_IMAGE/gitian/base-bionic-amd64:$CI_COMMIT_REF_SLUG
  before_script:
    - mv gitian-cache ${GITIAN_DIR}/cache || true
    - cd ${GITIAN_DIR}
    - echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
    - docker pull -q $IMAGE
    - docker tag $IMAGE base-bionic-amd64
  script:
    - make -j$(nproc) -C ${CI_PROJECT_DIR}/depends download SOURCES_PATH=${GITIAN_DIR}/cache/common
    - sed -i "s/^\ \ HOSTS=.*/\ \ HOSTS=\"${TARGET_ARCH}\"/g" ${CI_PROJECT_DIR}/contrib/gitian-descriptors/gitian-${TARGET_OS}.yml
    - ./bin/gbuild -j $(nproc) -m 30000 --commit peercoin=${CI_COMMIT_TAG:-$CI_COMMIT_SHA} --url peercoin=${CI_PROJECT_DIR} ${CI_PROJECT_DIR}/contrib/gitian-descriptors/gitian-${TARGET_OS}.yml
  after_script:
    - mv ${GITIAN_DIR}/cache ${CI_PROJECT_DIR}/gitian-cache
    - cp -r ${GITIAN_DIR}/build/out/* ${CI_PROJECT_DIR}/
  artifacts:
    name: "peercoin-${CI_COMMIT_REF_NAME}-${CI_JOB_NAME}"
    paths:
      - ${CI_PROJECT_DIR}/*.tar.gz
      - ${CI_PROJECT_DIR}/*.zip
      - ${CI_PROJECT_DIR}/*.exe
      - ${CI_PROJECT_DIR}/*.dmg
    expire_in: 1 week

intermediary:
  extends: .build job
  rules:
    - if: $CI_PIPELINE_SOURCE == "trigger"
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - when: always
  interruptible: true
  parallel:
    matrix:
      - TARGET_OS: win
        TARGET_ARCH: x86_64-w64-mingw32
      - TARGET_OS: osx
        TARGET_ARCH: x86_64-apple-darwin16
      - TARGET_OS: linux
        TARGET_ARCH: x86_64-linux-gnu
  artifacts:
    expire_in: 1 week

manual:
  extends: intermediary
  rules:
    - if: $CI_PIPELINE_SOURCE == "trigger"
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - when: manual
  allow_failure: true
  parallel:
    matrix:
      - TARGET_OS: linux
        TARGET_ARCH: [arm-linux-gnueabihf, aarch64-linux-gnu, riscv64-linux-gnu]

full:
  extends: .build job
  rules:
    - if: $CI_COMMIT_TAG
  parallel:
    matrix:
      - TARGET_OS: win
        TARGET_ARCH: [x86_64-w64-mingw32]
      - TARGET_OS: osx
        TARGET_ARCH: [x86_64-apple-darwin16]
      - TARGET_OS: linux
        TARGET_ARCH: [x86_64-linux-gnu, arm-linux-gnueabihf, aarch64-linux-gnu, riscv64-linux-gnu]

.docker peercoind job:
  extends: .build docker job
  stage: package
  tags: []
  variables:
    IMAGE: $CI_REGISTRY_IMAGE/peercoind
  script:
    - mkdir -p peercoin
    - tar xzf peercoin-*-$TARGET_ARCH.tar.gz -C peercoin --strip-components=1
    - rm peercoin/bin/peercoin-qt
    - |
      docker build --tag $IMAGE --tag $IMAGE:$CI_COMMIT_SHA --build-arg BUILDKIT_INLINE_CACHE=1 -f- .<<EOF
        FROM ubuntu:bionic
        COPY peercoin /usr/local
      EOF
    - docker push $IMAGE:$CI_COMMIT_SHA

int. docker peercoind:
  extends: .docker peercoind job
  variables:
    TARGET_ARCH: x86_64-linux-gnu
  rules:
    - if: $CI_PIPELINE_SOURCE == "trigger"
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - when: always
  needs: ["intermediary: [linux, x86_64-linux-gnu]"]
  dependencies: ["intermediary: [linux, x86_64-linux-gnu]"]

full docker peercoind:
  extends: .docker peercoind job
  variables:
    TARGET_ARCH: x86_64-linux-gnu
  rules:
    - if: $CI_COMMIT_TAG
  needs: ["full: [linux, x86_64-linux-gnu]"]
  dependencies: ["full: [linux, x86_64-linux-gnu]"]

.AppImage job:
  image: appimagecrafters/appimage-builder:latest
  stage: package
  tags: []
  before_script:
    - apt-get -qq update
    - apt-get install -qqy git wget
    - pip3 install --upgrade git+https://www.opencode.net/azubieta/appimagecraft.git
  script:
    - cp -r contrib/appimage/{AppDir,AppImageBuilder.yml} .
    - tar xzf peercoin-*-$TARGET_ARCH.tar.gz -C AppDir --strip-components=1
    - rm AppDir/bin/peercoin{-cli,-tx,-wallet,d}
    - appimage-builder --skip-tests
  artifacts:
    paths:
      - '*.AppImage*'
    expire_in: 1 week

int. AppImage x86_64:
  extends: .AppImage job
  variables:
    TARGET_ARCH: x86_64-linux-gnu
    APT_ARCH: amd64
    BUILD_ARCH: x86_64
  rules:
    - if: $CI_PIPELINE_SOURCE == "trigger"
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - when: always
  needs: ["intermediary: [linux, x86_64-linux-gnu]"]
  dependencies: ["intermediary: [linux, x86_64-linux-gnu]"]

full AppImage x86_64:
  extends: .AppImage job
  variables:
    TARGET_ARCH: x86_64-linux-gnu
    APT_ARCH: amd64
    BUILD_ARCH: x86_64
  rules:
    - if: $CI_COMMIT_TAG
  needs: ["full: [linux, x86_64-linux-gnu]"]
  dependencies: ["full: [linux, x86_64-linux-gnu]"]

.generate bootstrap.dat job:
  stage: package
  image: $CI_REGISTRY_IMAGE/peercoind:$CI_COMMIT_REF_SLUG
  variables:
    GIT_DEPTH: 1
    DEBIAN_FRONTEND: noninteractive
  before_script:
    - apt-get -qq update
    - apt-get install -yqq python3 rhash
  script:
    - export BOOTSTRAP_DAT="peercoin-bootstrap-${NET}net-$BLOCKCOUNT-blocks.dat"
    - export RPC="-rpcuser=rpc -rpcpassword=rpc"
    - eval 'peercoind -server=1 -daemon=1 ${RPC} ${ARGS}' &
    - |
      while [ ! -f $HOME/.peercoin${NETDIR}/debug.log ]; do sleep .1; done
    - |
      while ! grep -q "UpdateTip" $HOME/.peercoin${NETDIR}/debug.log; do sleep .1; done
    - |
      while [ "$(eval 'peercoin-cli ${RPC} ${ARGS} getblockcount')" -lt "$BLOCKCOUNT" ]; do tail $HOME/.peercoin${NETDIR}/debug.log && sleep 60; done
    - |
      cat > linearize.cfg <<EOF
      rpcuser = rpc
      rpcpassword = rpc
      datadir = $HOME/.peercoin${NETDIR}
      host = 127.0.0.1
      port = $PORT
      max_height = $BLOCKCOUNT
      netmagic = $NETMAGIC
      genesis = $GENESIS
      input = $HOME/.peercoin${NETDIR}/blocks
      output_file = $PWD/$BOOTSTRAP_DAT
      hashlist = hashlist.txt
      out_of_order_cache_sz = 100000000
      rev_hash_bytes = False
      file_timestamp = 0
      split_timestamp = 0
      debug_output = False
      EOF
    - python3 contrib/linearize/linearize-hashes.py linearize.cfg > hashlist.txt
    - python3 contrib/linearize/linearize-data.py linearize.cfg
    - echo $BLOCKCOUNT > blockcount.txt
    - rhash --torrent --magnet --btih --bt-announce udp://tracker.opentrackr.org:1337/announce --bt-announce udp://tracker.openbittorrent.com:6969/announce --bt-announce udp://exodus.desync.com:6969/announce $BOOTSTRAP_DAT | tr -d '\n' > magnet.txt
    - echo "&tr=udp%3A%2F%2Ftracker.opentrackr.org%3A1337%2Fannounce&tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A6969%2Fannounce&tr=udp%3A%2F%2Fexodus.desync.com%3A6969%2Fannounce" | tr -d '\n' >> magnet.txt
    - ln -s $BOOTSTRAP_DAT bootstrap.dat
    - peercoin-cli ${RPC} ${ARGS} getchaintxstats | tee chaintxstats.json
    - peercoin-cli ${RPC} ${ARGS} getblock $(peercoin-cli ${RPC} ${ARGS} getblockhash $BLOCKCOUNT) 2 | tee block.json
  artifacts:
    name: peercoin-bootstrap-${NET}net-$BLOCKCOUNT-blocks
    paths:
      - block.json
      - chaintxstats.json
      - hashlist.txt
      - magnet.txt
      - bootstrap.dat
      - peercoin-bootstrap*.dat
      - peercoin-bootstrap*.dat.torrent
    expire_in: 1 week

bootstrap.dat:
  extends: .generate bootstrap.dat job
  rules:
    - if: $BLOCKCOUNT_MAIN || $BLOCKCOUNT_TEST
  parallel:
    matrix:
      - NET: main
        NETMAGIC: e6e8e9e5
        PORT: 9902
        GENESIS: 0000000032fe677166d54963b62a4677d8957e87c508eaa4fd7eb1c880cd27e3
        BLOCKCOUNT: $BLOCKCOUNT_MAIN
      - NET: test
        ARGS: -testnet
        NETDIR: /testnet3
        NETMAGIC: cbf2c0ef
        PORT: 9904
        GENESIS: 00000001f757bb737f6596503e17cd17b0658ce630cc727c0cca81aec47c9f06
        BLOCKCOUNT: $BLOCKCOUNT_TEST

upload:
  stage: upload
  image: curlimages/curl:latest
  dependencies:
    - full
    - full AppImage x86_64
  rules:
    - if: $CI_PIPELINE_SOURCE == "trigger"
      when: never
    - if: $CI_COMMIT_TAG
  variables:
    GIT_STRATEGY: none
  script:
    - |
      for i in *; do curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${i} ${PACKAGE_REGISTRY_URL}/${i}; done

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - full
    - full AppImage x86_64
    - upload
  dependencies:
    - full
    - full AppImage x86_64
  rules:
    - if: $CI_PIPELINE_SOURCE == "trigger"
      when: never
    - if: $CI_COMMIT_TAG
  variables:
    GIT_STRATEGY: none
  script:
    - |
      eval 'release-cli create --name "Release $CI_COMMIT_TAG" --tag-name $CI_COMMIT_TAG $(for i in *; do echo  --assets-link "{\"name\":\"${i}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${i}\"}"; done)'
